trigger:
- main

variables:
  buildConfiguration: 'Release'
  sonar.projectKey: 'DevOps-Group4'
  sonar.projectName: 'DevOps-Group4'
  sonar.organization: 'donaldazhuga'
  mavenVersion: '3.9.9'
  dev.port: '8081'
  qa.port: '8082'
  staging.port: '8083'
  production.port: '8080'

stages:
# ------------------------------
# CI - BUILD & TEST
# ------------------------------
- stage: Build
  displayName: 'Build and Test'
  jobs:
    - job: Build
      pool:
        vmImage: 'ubuntu-latest'  # Using Microsoft-hosted agent with Java 21 support
      steps:
        # Step 1: Checkout code
        - checkout: self
          clean: true
          fetchDepth: 1
          displayName: 'Checkout from GitHub'

        # Step 2: Maven Build with Java 21
        - task: Maven@3
          displayName: 'Maven Build with Java 21'
          inputs:
            mavenPomFile: 'pom.xml'
            goals: 'clean verify'
            options: '-DskipTests=false -Xmx3072m'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: '21'
            jdkArchitectureOption: 'x64'
            mavenVersionOption: 'Default'
            publishJUnitResults: true
            testResultsFiles: '**/surefire-reports/TEST-*.xml'
            codeCoverageToolOption: 'JaCoCo'
            mavenAuthenticateFeed: true

        # Step 3: SonarQube Analysis
        - task: SonarCloudPrepare@1
          displayName: 'Prepare SonarQube Analysis'
          inputs:
            SonarCloud: 'DevOps'
            organization: '$(sonar.organization)'
            scannerMode: 'MSBuild'
            projectKey: '$(sonar.projectKey)'
            projectName: '$(sonar.projectName)'
            extraProperties: |
              sonar.verbose=true
              sonar.java.source=21
              sonar.java.target=21
              sonar.sourceEncoding=UTF-8
              sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
              sonar.junit.reportPaths=target/surefire-reports

        - task: SonarCloudAnalyze@1
          displayName: 'Run SonarQube Analysis'

        - task: SonarCloudPublish@1
          displayName: 'Publish Quality Gate'

        # Step 4: Publish Artifacts
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact'
          inputs:
            PathtoPublish: 'target'
            ArtifactName: 'drop'
            publishLocation: 'Container'

# ------------------------------
# CD - DEPLOYMENT
# ------------------------------
- stage: Deliver
  displayName: 'Deliver Artifacts'
  dependsOn: Build
  condition: succeeded()
  jobs:
    - job: Deliver
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - download: current
          artifact: drop
          displayName: 'Download Artifacts'

        - script: echo "Artifacts ready for deployment"
          displayName: 'Verify Artifacts'

- stage: DeployToDev
  displayName: 'Deploy to Dev'
  dependsOn: Deliver
  condition: succeeded()
  jobs:
    - job: DeployDev
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - download: current
          artifact: drop
          displayName: 'Download Artifacts'
        
        - script: |
            echo "Starting Dev Deployment on port $(dev.port)"
            java -jar target/*.jar --server.port=$(dev.port) &
            sleep 10
            curl http://localhost:$(dev.port)/actuator/health
          displayName: 'Deploy to Dev'
          env:
            JAVA_HOME: $(JAVA_HOME_21_X64)

# Mock deployments for other environments
- stage: DeployToQAT
  displayName: 'Deploy to QAT'
  dependsOn: DeployToDev
  condition: succeeded()
  jobs:
    - job: DeployQAT
      steps:
        - script: echo "Mock deployment to QAT on port $(qa.port)"
          displayName: 'Mock QAT Deployment'

- stage: DeployToStaging
  displayName: 'Deploy to Staging'
  dependsOn: DeployToQAT
  condition: succeeded()
  jobs:
    - job: DeployStaging
      steps:
        - script: echo "Mock deployment to Staging on port $(staging.port)"
          displayName: 'Mock Staging Deployment'

- stage: DeployToProduction
  displayName: 'Deploy to Production'
  dependsOn: DeployToStaging
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
    - job: DeployProd
      steps:
        - script: echo "Mock deployment to Production on port $(production.port)"
          displayName: 'Mock Production Deployment'